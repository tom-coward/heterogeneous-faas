package com.tomcoward.heterogeneousfaas.resourcemanager.database.daos;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException;
import com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution;
import com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecutionHelper__MapperGenerated;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class FunctionExecutionsDaoImpl__MapperGenerated extends DaoBase implements FunctionExecutionsDao {
  private static final Logger LOG = LoggerFactory.getLogger(FunctionExecutionsDaoImpl__MapperGenerated.class);

  private final FunctionExecutionHelper__MapperGenerated functionExecutionHelper;

  private final PreparedStatement getStatement;

  private final PreparedStatement getByFunctionNameStatement;

  private final PreparedStatement getByWorkerStatement;

  private final PreparedStatement createStatement;

  private FunctionExecutionsDaoImpl__MapperGenerated(MapperContext context,
      FunctionExecutionHelper__MapperGenerated functionExecutionHelper,
      PreparedStatement getStatement, PreparedStatement getByFunctionNameStatement,
      PreparedStatement getByWorkerStatement, PreparedStatement createStatement) {
    super(context);
    this.functionExecutionHelper = functionExecutionHelper;
    this.getStatement = getStatement;
    this.getByFunctionNameStatement = getByFunctionNameStatement;
    this.getByWorkerStatement = getByWorkerStatement;
    this.createStatement = createStatement;
  }

  @Override
  public FunctionExecution get(UUID id) throws DBClientException {
    BoundStatementBuilder boundStatementBuilder = getStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", id, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, functionExecutionHelper);
  }

  @Override
  public PagingIterable<FunctionExecution> getByFunctionName(String functionName) throws
      DBClientException {
    BoundStatementBuilder boundStatementBuilder = getByFunctionNameStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;
    if (functionName != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("functionName", functionName, String.class);
    }
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, functionExecutionHelper);
  }

  @Override
  public PagingIterable<FunctionExecution> getByWorker(String worker) throws DBClientException {
    BoundStatementBuilder boundStatementBuilder = getByWorkerStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;
    if (worker != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("worker", worker, String.class);
    }
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, functionExecutionHelper);
  }

  @Override
  public void create(FunctionExecution functionExecution) throws DBClientException {
    BoundStatementBuilder boundStatementBuilder = createStatement.boundStatementBuilder();
    functionExecutionHelper.set(functionExecution, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<FunctionExecutionsDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      FunctionExecutionHelper__MapperGenerated functionExecutionHelper = new FunctionExecutionHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        functionExecutionHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `public abstract com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution get(java.util.UUID) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement getStatement_simple = functionExecutionHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method public abstract com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution get(java.util.UUID) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          getStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getStatement = prepare(getStatement_simple, context);
      prepareStages.add(getStatement);
      // Prepare the statement for `public abstract PagingIterable<com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution> getByFunctionName(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement getByFunctionNameStatement_simple = replaceKeyspaceAndTablePlaceholders("SELECT * FROM ${qualifiedTableId} WHERE function_name = :functionName", context, functionExecutionHelper);
      LOG.debug("[{}] Preparing query `{}` for method public abstract PagingIterable<com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution> getByFunctionName(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          getByFunctionNameStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByFunctionNameStatement = prepare(getByFunctionNameStatement_simple, context);
      prepareStages.add(getByFunctionNameStatement);
      // Prepare the statement for `public abstract PagingIterable<com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution> getByWorker(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement getByWorkerStatement_simple = replaceKeyspaceAndTablePlaceholders("SELECT * FROM ${qualifiedTableId} WHERE worker = :workerId", context, functionExecutionHelper);
      LOG.debug("[{}] Preparing query `{}` for method public abstract PagingIterable<com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution> getByWorker(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          getByWorkerStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByWorkerStatement = prepare(getByWorkerStatement_simple, context);
      prepareStages.add(getByWorkerStatement);
      // Prepare the statement for `public abstract void create(com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement createStatement_simple = functionExecutionHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method public abstract void create(com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionExecution) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          createStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createStatement = prepare(createStatement_simple, context);
      prepareStages.add(createStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (FunctionExecutionsDao) new FunctionExecutionsDaoImpl__MapperGenerated(context,
              functionExecutionHelper,
              CompletableFutures.getCompleted(getStatement),
              CompletableFutures.getCompleted(getByFunctionNameStatement),
              CompletableFutures.getCompleted(getByWorkerStatement),
              CompletableFutures.getCompleted(createStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static FunctionExecutionsDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
