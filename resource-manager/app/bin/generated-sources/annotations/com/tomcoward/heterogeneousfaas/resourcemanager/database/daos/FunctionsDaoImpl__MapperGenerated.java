package com.tomcoward.heterogeneousfaas.resourcemanager.database.daos;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException;
import com.tomcoward.heterogeneousfaas.resourcemanager.models.Function;
import com.tomcoward.heterogeneousfaas.resourcemanager.models.FunctionHelper__MapperGenerated;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class FunctionsDaoImpl__MapperGenerated extends DaoBase implements FunctionsDao {
  private static final Logger LOG = LoggerFactory.getLogger(FunctionsDaoImpl__MapperGenerated.class);

  private final FunctionHelper__MapperGenerated functionHelper;

  private final PreparedStatement getStatement;

  private final PreparedStatement createStatement;

  private FunctionsDaoImpl__MapperGenerated(MapperContext context,
      FunctionHelper__MapperGenerated functionHelper, PreparedStatement getStatement,
      PreparedStatement createStatement) {
    super(context);
    this.functionHelper = functionHelper;
    this.getStatement = getStatement;
    this.createStatement = createStatement;
  }

  @Override
  public Function get(String functionName) throws DBClientException {
    BoundStatementBuilder boundStatementBuilder = getStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("name", functionName, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, functionHelper);
  }

  @Override
  public void create(Function function) throws DBClientException {
    BoundStatementBuilder boundStatementBuilder = createStatement.boundStatementBuilder();
    functionHelper.set(function, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<FunctionsDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      FunctionHelper__MapperGenerated functionHelper = new FunctionHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        functionHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `public abstract com.tomcoward.heterogeneousfaas.resourcemanager.models.Function get(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement getStatement_simple = functionHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method public abstract com.tomcoward.heterogeneousfaas.resourcemanager.models.Function get(java.lang.String) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          getStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getStatement = prepare(getStatement_simple, context);
      prepareStages.add(getStatement);
      // Prepare the statement for `public abstract void create(com.tomcoward.heterogeneousfaas.resourcemanager.models.Function) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException`:
      SimpleStatement createStatement_simple = functionHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method public abstract void create(com.tomcoward.heterogeneousfaas.resourcemanager.models.Function) throws com.tomcoward.heterogeneousfaas.resourcemanager.exceptions.DBClientException",
          context.getSession().getName(),
          createStatement_simple.getQuery());
      CompletionStage<PreparedStatement> createStatement = prepare(createStatement_simple, context);
      prepareStages.add(createStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (FunctionsDao) new FunctionsDaoImpl__MapperGenerated(context,
              functionHelper,
              CompletableFutures.getCompleted(getStatement),
              CompletableFutures.getCompleted(createStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static FunctionsDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
